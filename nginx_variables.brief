本文档介绍nginx的变量, 包括内部变量/外部变量及脚本引擎, 以期能更好理解
nginx的灵活特性, 也希望借此提高自身的编程水准.

<NOTE>
    1) 参考《深入剖析nginx》第8章, 变量机制
    2) refer <nginx_mod.brief>
    3) refer <nginx_mod_http.brief>
    4) 略过了复杂脚本情况的处理, 据说原理一样

<NOTE>变量初始化的总体流程

--ngx_http_module_t->preconfiguration() 在http{}解析前调用, 将各个模块儿支持
                                        的变量加入ngx_http_core_main_conf_t
                                            ->variables_keys, 此处为内部变量
--ngx_conf_parse()                      在配置文件中定义的, 称为外部变量, 也
                                        会加入->variables_keys; 
    --ngx_http_add_variable()               
    --ngx_http_rewrite_set()                另外, 引用的变量会加入->variables
        --ngx_http_get_variable_index()     以备后序合法性检测
--ngx_http_variables_init_vars()        根据->variables_keys, 对用户配置的变
                                        量->variables做合法性检测(属于包含关
                                        系), 不包含时, 必须以一下几个字符开
                                        头(因为它们是通过uri动态生成的):
                                            http_
                                            sent_http_
                                            upstream_http_
                                            cookie_
                                            upstream_cookie_
                                            arg_
                                        合法的, 设置其->get_handler/->data/
                                        ->flags

                                        并根据->variables_keys构造hash数组
                                            ngx_http_core_main_conf_t->
                                            variables_hash
--                                      后续请求中通过->get_handler()及
                                        脚本引擎更新所需要的变量
    --ngx_http_create_request()             创建ngx_http_request_t结构, 并
        --ngx_pcalloc()                     创建其->variables变量, 个数为
                                            ngx_http_core_main_conf_t->
                                            variables[]的个数; 
                                            
                                            所以ngx_http_request_t->variables
                                            变量值个数与配置中的变量描述一
                                            致, 可以通过ngx_http_variable_t
                                            ->index索引此处的数组以获取对应
                                            的值

                                            对于子请求, 重新创建结构体
                                            ngx_http_request_t, 但和父请求
                                            共享其->variables(因为大部分的
                                            值与父一样, 不一样的还可以动态
                                            更新)

    --ngx_http_rewrite_handler()        NGX_HTTP_REWRITE_PHASE阶段的处理函数
        --ngx_pcalloc()                     分配脚本引擎堆栈, 结构体
                                            ngx_http_script_engine_t
            --->ip                              = ngx_http_rewrite_loc_conf_t
                                                    ->codes->elts
            --->request
            --->quote                           = 1
            --->status                          = NGX_DECLINED
        --while()
            --->ip()                        强制类型转换, 并执行回调指针
                                            ngx_http_script_code_pt, 改写
                                            客户端请求中的变量

                                            由此可以推断, 每一个脚本的开始
                                            处必须是回调指针, 并且类型必须
                                            为ngx_http_script_code_pt


1. ngx_http_get_flushed_variable
2. ngx_http_rewrite_set
3. ngx_http_script_value_code
4. ngx_http_script_set_var_code
10.全局数据结构
    ---ngx_http_variable_t
    ---ngx_http_variable_value_t
    ---ngx_http_script_value_code_t
    ---ngx_http_script_var_code_t
    ---ngx_http_script_engine_t 


1. ngx_http_get_flushed_variable()
    @file: ~/src/http/ngx_http_variables.c
    @role: 更新变量值, 传入的参数包括变量名的索引->index
    @note: 调用函数ngx_http_get_variable()或其他模块儿直接调用

    --                              获取变量值, ngx_http_variable_value_t
                                    如果有效且允许缓存, 直接返回
        --ngx_http_request_t->variables[->index]
    --                              否则刷新其值, 此处就是所谓的"惰性求值"
                                    因为需要时才求值
        --ngx_http_get_indexed_variable()
            --ngx_http_core_main_conf_t->variables[]->get_handler()
                                        更新变量值

2. ngx_http_rewrite_set()
    @file: ~/src/http/modules/ngx_http_rewrite_module.c 
    @role: 命令"set"的处理函数, 在模块儿ngx_http_rewrite_module中;
            如有必要注册新变量, 生成脚本引擎以便在处理请求过程中,
            动态修改变量的值
    @note: 
        1) 语法格式 "set $var value;"(此为简单格式)
        2) 构建的脚本引擎, 只有当请求处于其作用域内时才被执行
        3) 对于1中的语法, 构建完毕后, 脚本格式如下
            ngx_http_rewrite_loc_conf_t->codes[]    存放地 
                ngx_http_script_value_code_t            脚本一
                    -->code = ngx_http_script_value_code
                    -->value = ngx_atoi(value)
                    -->text_len = strlen(value)
                    -->text_data = &value
                ngx_http_script_var_code_t              脚本二(内存上紧邻)
                    -->code = ngx_http_script_set_var_code
                    -->index = ->variables[]中的索引


    ----------提取变量名, 并存储----------------
    --ngx_http_add_variable()       加入ngx_http_core_main_conf_t->
                                        variables_keys数组
    --ngx_http_get_variable_index() 并加入->variables数组, 返回对应的索引
    --                              无->get_handler则设置默认值
        --ngx_http_variable_t->get_handler
                                        = ngx_http_rewrite_var, 仅当变量
                                            值未初始化时调用, 此函数返回
                                            ngx_http_variable_null_value
                                            这个nginx内置的空值

                                            正常初始化后, 应该使用函数
                                            ngx_http_get_indexed_variable()
                                            直接获取其值
        --->data                        = 索引

    ----------构建脚本引擎---------------------
    --ngx_http_rewrite_value()      1 生成脚本引擎<阶段一>
        --ngx_http_script_variables_count() 
                                        查找变量值中包含"$"开头的变量个数
        --------变量值不包含$, 简单情形------
        --ngx_http_script_start_code()  从ngx_http_rewrite_loc_conf_t->codes
            --ngx_array_push_n()        申请空间, 存储并初始化
                                        ngx_http_script_value_code_t
        --->code                            = ngx_http_script_value_code
        --->value                           = 设置的变量值(ngx_atoi()转化后)
        --->text_len                        = 变量值的长度
        --->text_data                       = 变量值的字符串形式
        --------变量值包含$, 复杂情形------
        --ngx_http_script_start_code()  从ngx_http_rewrite_loc_conf_t->codes
                                        申请空间, 存储并初始化
                                        ngx_http_script_complex_value_code_t
        --->code                            = ngx_http_script_complex_value_code
        --->lengths                         = NULL
        --ngx_http_script_compile()
    --                              1 如果有ngx_http_variable_t->set_handler
                                      <阶段二>, 类型
                                      ngx_http_script_var_handler_code_t
        --ngx_http_script_start_code()
            --->code                    = ngx_http_script_var_set_handler_code
            --->handler                 = ngx_http_variable_t->set_handler
            --->data                    = ngx_http_variable_t->data
    --ngx_http_script_start_code()  1 生成脚本引擎<阶段三>
                                      类型ngx_http_script_var_code_t
        --->code                        = ngx_http_script_set_var_code
        --->index                       = 变量的->variables[]索引

3. ngx_http_script_value_code()
    @file: ~/src/http/ngx_http_script.c
    @role: 针对当前变量, 构建脚本引擎堆栈的回调函数, 相当于提取值的过程;
            处理的脚本类型为ngx_http_script_value_code_t

    --                              更新ngx_http_script_engine_t
        --递增->ip                      指向本脚本的下一个字节(暗示着每个
                                            脚本第一个字节必须为回调函数
                                            指针)
        --赋值->sp->len/->data          指向当前脚本->text_len/text_data
        --递增->sp++                    增加堆栈深度

4. ngx_http_script_set_var_code()
    @file: ~/src/http/ngx_http_script.c
    @role: 针对当前变量, 执行脚本引擎堆栈的回调函数, 相当于给变量赋值
            的过程; 处理的脚本类型为ngx_http_script_var_code_t

    --                              更新ngx_http_script_engine_t
        --递增->ip                      指向下一个待执行脚本
        --递减->sp--                    减少堆栈深度
    --                              更新ngx_http_request_t->variables[]
                                    对应的变量值
        --->len                         = ->sp->len
        --->valid                       = 1
        --->no_cacheable                = 0
        --->not_found                   = 0
        --->data                        = ->sp->data


10.全局数据结构
    10.1 ngx_http_variable_t
    @file: ~/src/http/ngx_http_variables.h
    @role: 变量结构
    @note: 除此变量外, 还有ngx_http_variable_value_t变量的存在, 主要目的
            是分开变量描述和变量值, 以节省内存(变量描述每个程序一份, 变量
            值, 每个请求一份)

    typedef struct ngx_http_variable_s  ngx_http_variable_t;
    struct ngx_http_variable_s {
        ngx_str_t name;             变量名字符串
        ngx_http_set_variable_pt set_handler;
                                    组成脚本引擎的一部分, 在处理请求过程中
                                        动态更新对应的变量值; 带有此接口的
                                        变量都是_CHANGEABLE + _NOCACHEABLE
        ngx_http_get_variable_pt get_handler;
                                    获取变量值的回调函数, 通过其屏蔽简单的
                                        "直接的情况"和复杂的"间接的情况"之
                                        间的差异
        uintptr_t  data;            指向存放变量的地方, ngx_http_request_t
                                        变量中的某个字段, 称为"直接的情况"
                                        (大部分内部变量属于此类); 还有"间接
                                        的情况", 此时此值 = 0; 

                                        此值一般作为->set_handler/get_handler
                                        函数的第三个参数, 在"直接的情况"下
                                        用于指定变量在请求头中的偏移, 以便
                                        回调函数操作(修改/读取)
        ngx_uint_t flags;           标识
                                        NGX_HTTP_VAR_CHANGEABLE 可重复添加
                                        NGX_HTTP_VAR_NOCACHEABLE不可缓存
                                        NGX_HTTP_VAR_INDEXED
                                        NGX_HTTP_VAR_NOHASH
        ngx_uint_t index;           对应在ngx_http_core_main_conf_t
                                    ->variables[]中的下标, 用于查找对应的
                                    变量值
    };

    10.2 ngx_http_variable_value_t
    @file: ~/src/core/ngx_string.h
    @role: 变量值结构

    typedef struct {
        unsigned len:28;            长度

        unsigned valid:1;           是否有效?
        unsigned no_cacheable:1;    是否需要缓存?
        unsigned not_found:1;       是否已找到变量值?
        unsigned escape:1;

        u_char   *data;             变量的值; 注意与ngx_http_variable_t
                                    ->data("直接的情况", 指向变量在请求
                                    头中的位置; "间接的情况", 为0)的区别
    } ngx_variable_value_t;

    10.3 ngx_http_script_value_code_t
    @file: ~/src/http/ngx_http_script.h
    @role: 简单脚本引擎的结构, 对应"set $var value;"的配置语法
            对应获取(变量)值的过程

    typedef struct {
        ngx_http_script_code_pt code;   把变量值压栈的函数, 默认为
                                            ngx_http_script_value_code()
        uintptr_t value;                设置的变量值, ngx_atoi()转化后
        uintptr_t text_len;             原变量值串的长度
        uintptr_t text_data;            原变量值串
    } ngx_http_script_value_code_t;

    10.4 ngx_http_script_var_code_t
    @file: ~/src/http/ngx_http_script.h
    @role: 简单脚本引擎的结构, 对应"set $var value;"的配置语法
            对应请求变量赋值的过程

    typedef struct {
        ngx_http_script_code_pt code;   把压栈的变量值出栈的函数, 默认为
                                            ngx_http_script_set_var_code()
        uintptr_t index;                变量在->variables[]的索引
    } ngx_http_script_var_code_t;

    10.5 ngx_http_script_engine_t 
    @file: ~/src/http/ngx_http_script.h
    @role: 脚本引擎执行时所需的堆栈, 后进先出, 用于保存中间的变量等信息

    typedef struct {
        u_char  *ip;                    当前脚本的回调指针
        u_char  *pos;
        ngx_http_variable_value_t *sp;  栈顶指针, 临时保存变量值, 用于在
                                        脚本之间传递数据
        ngx_str_t buf;
        ngx_str_t line;

        /* the start of the rewritten arguments */
        u_char  *args;

        unsigned  flushed:1;
        unsigned  skip:1;
        unsigned  quote:1;
        unsigned  is_args:1;
        unsigned  log:1;

        ngx_int_t status;
        ngx_http_request_t *request;    对应的客户端请求
    } ngx_http_script_engine_t;

