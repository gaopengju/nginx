本文档摘录ngx_http_module模块儿, 主要涉及配置文件解析; 对于具体的
HTTP报文相关操作, 参考nginx_http_xxx.brief系列, 备忘


1. ngx_http_block
2. ngx_http_init_connection
10.全局数据结构
    ---ngx_http_conf_ctx_t
    ---ngx_http_module


1. ngx_http_block()
    @file: ~/src/http/ngx_http.c
    @role: 解析配置文件的http{}块, 初始化的数据结构基本都在
            nginx_mod_http_core.brief中描述
    @note: 配置结构的组织, 参考文献
            <nginx -- 图解Nginx中的4级指针>
            <Nginx的http配置结构体的组织结构>
            <nginx配置初始化过程>

    --ngx_pcalloc()                 分配配置结构ngx_http_conf_ctx_t,
                                        赋值到ngx_cycle->conf_ctx[]
    --for()                         遍历ngx_modules[],类型NGX_HTTP_MODULE
                                        初始化ngx_modules[]->ctx_index
    --ngx_pcalloc()                 分配二维指针，ngx_http_conf_ctx_t
                                        ->main_conf
                                        ->srv_conf
                                        ->loc_conf
    --for()                         遍历ngx_modules[],类型NGX_HTTP_MODULE
        --ngx_modules[]->ctx->create_main_conf()
                                        赋值->main_conf[]
        --ngx_modules[]->ctx->create_srv_conf()
                                        赋值->srv_conf[]
        --ngx_modules[]->ctx->create_loc_conf()
                                        赋值->loc_conf[]
    --for()                         遍历ngx_modules[],类型NGX_HTTP_MODULE
                                        注册内部变量
        --ngx_modules[]->ctx->preconfiguration()
    --ngx_conf_parse()              解析配置文件http{}
    --for()                         遍历ngx_modules[],类型NGX_HTTP_MODULE
                                        设置默认值, 并合并配置
        --ngx_modules[]->ctx->init_main_conf()
        --ngx_http_merge_servers()
    --                              创建location树, 便于加速查找
        --ngx_http_init_locations()
        --ngx_http_init_static_location_trees()
    --ngx_http_init_phases()        初始化各处理各阶段指针数组
        --ngx_array_init()              ngx_http_core_main_conf_t->phases[]
    --ngx_http_init_headers_in_hash()
                                    将ngx_http_headers_in[]加入
        --ngx_hash_key_lc()             ngx_http_core_main_conf_t->
        --ngx_hash_init()               headers_in_hash
    --for()                         遍历ngx_modules[],类型NGX_HTTP_MODULE
                                        注册报文处理的filter钩子等
        --ngx_modules[]->ctx->postconfiguration()
    --ngx_http_variables_init_vars()
                                    根据->variables_keys, 对用户配置的变量
                                    ->variables做合法性检测(属于包含关系),
                                    不包含时, 必须以一下几个字符开头(因为
                                    它们是通过uri动态生成的):
                                        http_
                                        sent_http_
                                        upstream_http_
                                        cookie_
                                        upstream_cookie_
                                        arg_
                                    合法的继承其->get_handler/->data/->flags

                                    并根据->variables_keys构造hash数组
                                    ngx_http_core_main_conf_t->variables_hash
    --ngx_http_init_phase_handlers()
                                    <Bang!!!>根据ngx_http_core_main_conf_t
                                        ->phases[], 初始化->phase_engine 
                                    1) 加上检测函数, 裁决是否调用此回调?
                                    2) 通过next变换二维phases[]为一维表示
        --ngx_pcalloc()                 多分配NGX_HTTP_REWRITE_PHASE/
                                        NGX_HTTP_ACCESS_PHASE
        --for()                     3) 其中四个阶段不能注册回调
                                        NGX_HTTP_FIND_CONFIG_PHASE
                                        NGX_HTTP_POST_REWRITE_PHASE
                                        NGX_HTTP_POST_ACCESS_PHASE
                                        NGX_HTTP_TRY_FILES_PHASE
    --ngx_http_optimize_servers()   <Bang!!!>根据
                                    ngx_http_core_main_conf_t->ports[]
                                    建立监听插口，并设置其处理函数
        --ngx_sort()                    相同端口下地址排序
                                            绑定的地址靠前
                                            wildcard地址靠后
                                            其他相对顺序不变
        --ngx_http_server_names()       如果单个地址有多个server监听, 则
                                            以server name为key做成hash表,
                                            以便后续查找加速
        --ngx_http_init_listening()     创建监听结构ngx_listening_t
                                        如果有"*:port"此类模糊绑定, 则其余
                                        的绑定都不再监听
            --ngx_http_add_listening()
                --ngx_create_listening()    加入ngx_cycle->listening[]
                --设置ngx_listening_t->handler
                                            = ngx_http_init_connection()
                                            在处理accept事件时被调用
            --ngx_http_add_addrs()      初始化ngx_listening_t->servers[]
                                            refer <nginx_socket.brief>

                                        结构组织图, 参考图9-2 p185
                                        《深入剖析nginx》

2. ngx_http_init_connection()
    @file: ~/src/http/ngx_http_request.c
    @role: 在处理accept事件时调用, 初始化HTTP连接的后续操作句柄等;
            调用函数ngx_event_accept(), refer <nginx_event.brief>

    --ngx_pcalloc()                 分配链接信息结构ngx_http_connection_t
                                        赋值ngx_connection_t->data
    --                              从ngx_listening_t->servers[]中找到此链接
                                    的合适的处理服务器(匹配监听地址)
        --ngx_connection_local_sockaddr()
            --getsockname()             获取当前连接绑定的本地地址
        --遍历ngx_http_port_t->addrs[]匹配地址,
          匹配不到的用最后一个, 一般最后为模糊
          地址*
            --赋值ngx_http_connection_t->addr_conf
                                        = ngx_http_port_t->addrs[].conf
        --赋值ngx_http_connection_t->conf_ctx
                                        = ngx_http_port_t->addrs[].conf->
                                            default_server->ctx, 选中服务
                                            器的配置上下文
    --初始化日志处理
    --赋值ngx_event_t->handler      收/发句柄，
                                        ngx_http_wait_request_handler(读)
                                        ngx_http_empty_handler(写)
                                        ngx_http_spdy_init(SPDY)
                                        ngx_http_ssl_handshake(SSL)
    --ngx_add_timer()               Accept后, 添加数据等待超时事件
    --ngx_reusable_connection()
    --ngx_handle_read_event()       添加到epoll监控, NGX_READ_EVENT
        --ngx_add_event()               等待客户端请求

10.全局数据结构
    10.1 ngx_http_conf_ctx_t
    @file: ~/src/http/ngx_http_config.h
    @role: http模块儿的配置信息，在http上下文、server上下文、location上下文
            都需要分配此结构，并初始化

    typedef struct {
        void        **main_conf;    对应http{xxx}
        void        **srv_conf;     对应http{server{xxx}}
        void        **loc_conf;     对应http{server{location{xxx}}}
    } ngx_http_conf_ctx_t;

    10.2 ngx_http_module
    @file: ~/src/http/ngx_http.c
    @role: HTTP的核心模块儿

    ngx_module_t  ngx_http_module = {
        NGX_MODULE_V1,
        &ngx_http_module_ctx,
        ngx_http_commands,
        NGX_CORE_MODULE,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NGX_MODULE_V1_PADDING
    };



