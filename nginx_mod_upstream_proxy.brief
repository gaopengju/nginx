本文档摘录proxy模块儿，用于串联upstream和lb，实现后端的负载均衡，备忘

<NOTE>
    1) 实现文件: ~/src/http/modules/ngx_http_proxy_module.c
    2) 调用流程
    ngx_http_wait_request_handler()     http请求处理入口<_http_request.brief>
        ngx_http_core_run_phases()      各phase[]阶段handler处理
                                        refer <nginx_handler.brief>
            -ngx_http_core_find_config_phase()
                                            NGX_HTTP_FIND_CONFIG_PHASE阶段
                                            匹配location
                -ngx_http_update_location_config()
                    -赋值ngx_http_request_t->content_handler      
                                                = ngx_http_proxy_handler
            -ngx_http_core_content_phase()  NGX_HTTP_CONTENT_PHASE阶段
                                            内容处理
                -ngx_http_request_t->content_handler()
                    -ngx_http_proxy_handler()   upstream代理模块儿
                    -ngx_http_finalize_request()

1. ngx_http_proxy_pass
2. ngx_http_proxy_handler
3. ngx_http_upstream_process_header
10.全局数据结构
    ---ngx_http_proxy_loc_conf_t
    ---ngx_http_upstream_conf_t
    ---ngx_http_upstream_t
    ---ngx_http_proxy_module
    ---ngx_http_proxy_vars[]



1. ngx_http_proxy_pass()
    @role: 解析配置指令proxy_pass
    @note: 此函数设置了对应location的处理句柄 

    --ngx_http_conf_get_module_loc_conf()
    --设置ngx_http_core_loc_conf_t->handler 
                                获取对应的location配置信息, 并设置其
                                处理句柄 = ngx_http_proxy_handler
    --...
    --ngx_http_upstream_add()   赋值ngx_http_core_loc_conf_t
                                ->upstream.upstream
        --ngx_parse_url()           解析配置
            --ngx_parse_inet_url()
        --查找对应的upstream模块儿

2. ngx_http_proxy_handler()
    @role: 对应location的处理句柄
    @note: 后续利用xxx标识ngx_http_upstream_t

    --ngx_http_upstream_create()
                                创建ngx_http_request_t->upstream
                                    类型ngx_http_upstream_t
    --ngx_pcalloc()             分配代理环境ngx_http_proxy_ctx_t,
    --ngx_http_set_ctx()            并设置到ngx_http_request_t->
                                    ctx[ngx_http_proxy_module]
    --ngx_http_get_module_loc_conf()
    --                          初始化ngx_http_upstream_t, 设置对应的
                                upstream和处理回调
        --赋值xxx->output.tag       = &ngx_http_proxy_module
        --赋值xxx->conf             此location的proxy_pass对应的upstream
                                         ngx_http_upstream_conf_t
        --初始化xxx->create_request = ngx_http_proxy_create_request
                ->reinit_request    = ngx_http_proxy_reinit_request
                ->process_header    = ngx_http_proxy_process_status_line
                ->abort_request     = ngx_http_proxy_abort_request
                ->finalize_request  = ngx_http_proxy_finalize_request
                ->rewrite_redirect  = ngx_http_proxy_rewrite_redirect
                ->rewrite_cookie    = ngx_http_proxy_rewrite_cookie
                ->input_filter_init = ngx_http_proxy_input_filter_init
                ->input_filter      = ngx_http_proxy_non_buffered_copy_filter
        --赋值->input_filter_ctx    = 对应本次请求ngx_http_request_t
    --ngx_http_read_client_request_body()
                                处理报文的请求体, body; 传入的回调钩子为
                                ngx_http_upstream_init()
        --ngx_pcalloc()             分配ngx_http_request_body_t, 赋值
                                    ngx_http_request_t->request_body
            --初始化->post_handler      = ngx_http_upstream_init
            --初始化->rest              = -1
        --ngx_http_upstream_init()  初始化upstream连接
            --ngx_http_upstream_init_request()
                --xxx->create_request()
                -->ngx_http_proxy_create_request()
                                        构造发往后端服务器的请求报文
                --...
                --ngx_http_upstream_conf_t->upstream->peer.init()
                                        每次发送客户请求前, LB策略环境
                                        初始化
                --ngx_http_upstream_connect()
                                        连接后端服务器, 并发送请求
                    --ngx_event_connect_peer()
                                            利用LB策略获取后端服务器,
                                            并新建连接
                        --ngx_peer_connection_t->get()
                            -->ngx_http_upstream_get_round_robin_peer()
                        --ngx_socket()
                        --ngx_get_connection()
                        --ngx_nonblocking()
                        --ngx_add_conn()
                        --connect()
                    --                      设置连接读写事件处理句柄
                        --ngx_connection_t->write->handler
                        --ngx_connection_t->read->handler
                                                = ngx_http_upstream_handler
                    --                      设置后端服务器请求的处理句柄
                        --ngx_http_upstream_t->write_event_handler
                        --ngx_http_upstream_t->read_event_handler
                                                = ngx_http_upstream\
                                                    _send_request_handler
                                                = ngx_http_upstream\
                                                    _process_header
                    --ngx_http_upstream_send_request()
                                            向后端服务器发送报文
                        --ngx_http_upstream_send_request_body()
                            --ngx_output_chain()
                                --ngx_chain_writer()
                                    --ngx_linux_sendfile_chain()
                                        --ngx_writev()
    --返回值为NGX_DONE

3. ngx_http_upstream_process_header()
    @file: ~/src/http/ngx_http_upstream.c
    @role: 接收upstream后端服务器回应的报文, 并处理报文头

    --recv()                        接收数据
    --ngx_http_upstream_t->process_header()
    -->ngx_http_proxy_process_status_line()
                                    处理回应报文头
        --ngx_http_parse_status_line()  获取回应状态
        --设置ngx_http_upstream_t->process_header
                                        = ngx_http_proxy_process_header
        --ngx_http_proxy_process_header()
                                        解析回应报文头, 并执行相应的回调
            --ngx_http_parse_header_line()
            --ngx_list_push()
            --ngx_hash_find()
            --ngx_http_upstream_header_t->handler()
    --ngx_http_upstream_process_headers()
                                    构造回应客户端的报文头信息
    --ngx_http_upstream_send_response()
                                    给客户端发送响应
        --ngx_http_send_header()
                                        发送响应头
            --ngx_http_top_header_filter()  <Bang!!!>引发filter执行
            -->ngx_http_header_filter()         最后调用此过滤函数
                --ngx_http_write_filter()          
                    --ngx_connection_t->send_chain()
                    -->ngx_send_chain()
                    -->ngx_io.send_chain()
                    -->ngx_os_io.send_chain()
                    -->ngx_writev_chain()
                    -->ngx_writev()
        --赋值ngx_http_upstream_t->header_sent
                                        = 1, 表征响应头已经发送
        --ngx_http_upstream_process_upstream()
                                        处理相应消息体
            --ngx_http_upstream_process_request()
                --ngx_http_upstream_finalize_request()
                    --ngx_http_upstream_t->finalize_request()
                    -->ngx_http_proxy_finalize_request()
                                            记日志 
                    --ngx_http_send_special()
                                            <Bang!!!>触发报文体filter过滤
                        --ngx_http_output_filter()
                            --ngx_http_top_body_filter()
                            -->ngx_http_write_filter()
                                                最后调用此过滤函数, 发送
                                                报文
                    --ngx_http_finalize_request()
                                                正常断开连接
                        --ngx_http_post_action()
                        --ngx_http_finalize_connection()

10.全局数据结构
    10.1 ngx_http_proxy_loc_conf_t
    @role: proxy模块儿的location配置上下文

    typedef struct {
        ngx_http_upstream_conf_t upstream;
                                对应的upstream模块儿
        ...
        ngx_str_t url;          proxy_pass关键字后对应的配置, 
                                    如"http://backend"
        ngx_str_t location;     对应的location配置, 如"/"
        ...
    } ngx_http_proxy_loc_conf_t;
    
    10.2 ngx_http_upstream_conf_t
    @file: ~/src/http/ngx_http_upstream.h
    @role: 对应的upstream配置

    typedef struct {
        ngx_http_upstream_srv_conf_t    *upstream;
                                对应upstream模块儿的配置, refer
                                <nginx_mod_upstream.brief>
        -------------------本地信息-----------------------
        ...
        ngx_str_t                        module;
    } ngx_http_upstream_conf_t;

    10.3 ngx_http_upstream_t
    @file: ~/src/http/ngx_http_upstream.h
    @role: http请求对应的upstream, ngx_http_request_t->upstream

    typedef struct ngx_http_upstream_s    ngx_http_upstream_t;
    struct ngx_http_upstream_s {
        ngx_http_upstream_handler_pt read_event_handler;
        ngx_http_upstream_handler_pt write_event_handler;
                                读写事件处理句柄, 
                                    ngx_http_upstream_send_request_handler
                                    ngx_http_upstream_process_header
        ngx_peer_connection_t  peer;

        ngx_event_pipe_t  *pipe;

        ngx_chain_t  *request_bufs;
                                向后端服务器发送的请求缓存

        ngx_output_chain_ctx_t  output;
        ngx_chain_writer_ctx_t  writer;

        ngx_http_upstream_conf_t *conf;
                                指向location对应的upstream配置

        ngx_http_upstream_headers_in_t headers_in;

        ngx_http_upstream_resolved_t *resolved;

        ngx_buf_t   from_client;

        ngx_buf_t   buffer;
        off_t       length;

        ngx_chain_t *out_bufs;
        ngx_chain_t *busy_bufs;
        ngx_chain_t *free_bufs;

        ngx_int_t   (*input_filter_init)(void *data);
                                根据获得的后端服务器的响应头, 为将要
                                返回的响应body处理工作做准备
        ngx_int_t   (*input_filter)(void *data, ssize_t bytes);
                                处理后端服务器返回的响应体, body
        void        *input_filter_ctx;
                                指向ngx_http_request_t结构

        ngx_int_t   (*create_request)(ngx_http_request_t *r);
                                构造发往后端服务器的请求
        ngx_int_t   (*reinit_request)(ngx_http_request_t *r);
                                对交互重新初始化, 如某台后端服务器故障
                                无法完成交互的情况
        ngx_int_t   (*process_header)(ngx_http_request_t *r);
                                处理后端服务器返回的响应头, 转变为回应
                                客户端的头
        void   (*abort_request)(ngx_http_request_t *r);
                                异常结束与后端服务器的交互, 如日志等
        void   (*finalize_request)(ngx_http_request_t *r, ngx_int_t rc);
                                正常结束与后端服务器的交互, 如日志等
        ngx_int_t   (*rewrite_redirect)(ngx_http_request_t *r,
                ngx_table_elt_t *h, size_t prefix);
        ngx_int_t   (*rewrite_cookie)(ngx_http_request_t *r,
                ngx_table_elt_t *h);

        ngx_msec_t timeout;

        ngx_http_upstream_state_t       *state;

        ngx_str_t  method;
        ngx_str_t  schema;
        ngx_str_t  uri;

        ngx_http_cleanup_pt *cleanup;

        unsigned store:1;
        unsigned cacheable:1;
        unsigned accel:1;
        unsigned ssl:1;

        unsigned buffering:1;
        unsigned keepalive:1;
        unsigned upgrade:1;

        unsigned request_sent:1;
        unsigned header_sent:1;         回应头部的发送处理完毕
    };

    10.4 ngx_http_proxy_module
    @role: proxy pass模块儿

    ngx_module_t  ngx_http_proxy_module = {
        NGX_MODULE_V1,
        &ngx_http_proxy_module_ctx,     模块儿独有信息
        ngx_http_proxy_commands,        支持的配置项及处理回调
        NGX_HTTP_MODULE,                模块儿类型
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NGX_MODULE_V1_PADDING
    };

    static ngx_http_module_t  ngx_http_proxy_module_ctx = {
        ngx_http_proxy_add_variables,
                                将ngx_http_proxy_vars[]
                                加入到ngx_http_core_main_conf_t
                                ->variables_keys
        NULL,

        ngx_http_proxy_create_main_conf,
                                创建配置ngx_http_proxy_main_conf_t,
                                作为proxy模块儿的上下文
        NULL,

        NULL,
        NULL,

        ngx_http_proxy_create_loc_conf,
                                创建配置ngx_http_proxy_loc_conf_t,
                                作为location的上下文配置信息
        ngx_http_proxy_merge_loc_conf
    };

    10.5 ngx_http_proxy_vars[]
    @role: proxy模块儿支持的内置变量

    static ngx_http_variable_t  ngx_http_proxy_vars[] = {
        { ngx_string("proxy_host"), NULL, ngx_http_proxy_host_variable,
            0, NGX_HTTP_VAR_CHANGEABLE|NGX_HTTP_VAR_NOCACHEABLE|
                NGX_HTTP_VAR_NOHASH,
            0 },
        ...
    };






