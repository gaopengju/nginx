本文档概述nginx模块儿, 包括nginx包含的主要模块儿、模块儿初始化流程及主
要的模块儿数据结构; 从总体上指导后续文档阅读, 如nginx_mod_xxx.brief


1. 模块儿的初始化流程
2. ngx_module_t
3. ngx_http_module_t 
10.ngx_modules[]

1. 模块儿的初始化流程
--main()                        nginx入口
    --for()                         按顺序初始化ngx_modules[].index
    --ngx_init_cycle()              配置解析，refer <nginx_cycle.brief>
                                    创建模块儿的配置环境, 并初始化
        --ngx_modules[]->ctx->create_conf()  
                                        NGX_CORE_MODULE类型模块儿, 创建
                                        配置信息环境,ngx_cycle->conf_ctx[]
        --...
        --解析配置文件
            --可能涉及到配置环境的创建
                --ngx_modules[]->ctx->create_conf()  
            --ngx_conf_parse()
            --可能涉及到配置环境的初始化
                --ngx_modules[]->ctx->init_conf()  
        --...
        --ngx_modules[]->ctx->init_conf()    
                                        未配置的ngx_cycle->conf_ctx[]项
                                            采用默认值(NGX_CORE_MODULE)
        --ngx_modules[]->init_module()  初始化模块儿(所有)
    ---------------单进程模式---------------
    --ngx_single_process_cycle()
        --ngx_modules[]->init_process() 模块儿进程级初始化(所有)
    -----------master+worker模式------------
    --ngx_master_process_cycle()
        --ngx_start_worker_processes()
            --ngx_worker_process_cycle()
                --ngx_worker_process_init()
                    --ngx_modules[]->init_process()

2. ngx_module_t
    @file: ~/src/core/ngx_conf_file.h
    @role: nginx支持的模块儿的表述结构

    typedef struct ngx_module_s      ngx_module_t;
    struct ngx_module_s {
        ngx_uint_t  ctx_index;  在同类型模块儿中的索引
        ngx_uint_t  index;      在所有模块儿中的索引, 对应ngx_modules[]索引
        ...
        ngx_uint_t version;     当前模块儿版本号

        void  *ctx;             指向当前模块儿特有的数据, 对应->type
                                字段, 类型分别为
                                    ngx_core_module_t
                                    ngx_event_module_t
                                    NULL
                                    ngx_http_module_t
                                    ngx_mail_module_t
        ngx_command_t *commands;配置项的处理函数数组, 间接指定了当前
                                    模块儿可以解析的配置项
        ngx_uint_t type;        模块儿类型
                                    NGX_CORE_MODULE
                                    NGX_EVENT_MODULE
                                    NGX_CONF_MODULE
                                    NGX_HTTP_MODULE
                                    NGX_MAIL_MODULE
        ngx_int_t  (*init_master)(ngx_log_t *log);

        ngx_int_t  (*init_module)(ngx_cycle_t *cycle);

        ngx_int_t  (*init_process)(ngx_cycle_t *cycle);
        ngx_int_t  (*init_thread)(ngx_cycle_t *cycle);
        void       (*exit_thread)(ngx_cycle_t *cycle);
        void       (*exit_process)(ngx_cycle_t *cycle);

        void       (*exit_master)(ngx_cycle_t *cycle);
    };

3. ngx_http_module_t 
    @file: ~/src/http/ngx_http_config.h
    @role: 模块儿类型NGX_HTTP_MODULE的特有数据, ngx_module_t->ctx

    typedef struct {
        ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);
                            在http{}配置块解析前被调用, 功能包括:
                            1)模块儿支持的内部变量加入到
                                ngx_http_core_main_conf_t->variables_keys
        ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);
                            在http{}配置块解析后被调用, 功能包括:
                            1)填充默认值
                            2)挂载处理指针到
                                ngx_http_core_main_conf_t->phases[]

        void *(*create_main_conf)(ngx_conf_t *cf);
        char *(*init_main_conf)(ngx_conf_t *cf, void *conf);

        void *(*create_srv_conf)(ngx_conf_t *cf);
        char *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

        void *(*create_loc_conf)(ngx_conf_t *cf);
        char *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
    } ngx_http_module_t;

10. ngx_modules[]
    @file: ~/objs/ngx_modules.c
    @role: nginx所有模块儿组成的数组
    @note: 由./configure自动生成

    extern ngx_module_t  *ngx_modules[];

    ngx_module_t *ngx_modules[] = {
        &ngx_core_module,                   类型NGX_CORE_MODULE
        &ngx_errlog_module,                 类型NGX_CORE_MODULE
        &ngx_conf_module,
        &ngx_events_module,                 类型NGX_CORE_MODULE
        &ngx_event_core_module,
        &ngx_epoll_module,
        &ngx_openssl_module,                类型NGX_CORE_MODULE
        &ngx_regex_module,                  类型NGX_CORE_MODULE
        &ngx_http_module,                   类型NGX_CORE_MODULE
        &ngx_http_core_module,
        &ngx_http_log_module,               handler模块儿
        &ngx_http_upstream_module,
        &ngx_http_static_module,
        &ngx_http_autoindex_module,
        &ngx_http_index_module,
        &ngx_http_auth_basic_module,
        &ngx_http_access_module,
        &ngx_http_limit_conn_module,
        &ngx_http_limit_req_module,
        &ngx_http_geo_module,
        &ngx_http_map_module,
        &ngx_http_split_clients_module,
        &ngx_http_referer_module,
        &ngx_http_rewrite_module,           handler模块儿
        &ngx_http_ssl_module,
        &ngx_http_proxy_module,             upstream模块儿
        &ngx_http_fastcgi_module,
        &ngx_http_uwsgi_module,
        &ngx_http_scgi_module,
        &ngx_http_memcached_module,
        &ngx_http_empty_gif_module,
        &ngx_http_browser_module,
        &ngx_http_upstream_hash_module,     loadbalance模块儿
        &ngx_http_upstream_ip_hash_module,  loadbalance模块儿
        &ngx_http_upstream_least_conn_module,
        &ngx_http_upstream_keepalive_module,
        &ngx_http_write_filter_module,      filter模块儿
        &ngx_http_header_filter_module,
        &ngx_http_chunked_filter_module,
        &ngx_http_range_header_filter_module,
        &ngx_http_gzip_filter_module,
        &ngx_http_postpone_filter_module,
        &ngx_http_ssi_filter_module,
        &ngx_http_charset_filter_module,
        &ngx_http_userid_filter_module,
        &ngx_http_headers_filter_module,
        &ngx_http_copy_filter_module,
        &ngx_http_range_body_filter_module,
        &ngx_http_not_modified_filter_module,
        NULL
    };




