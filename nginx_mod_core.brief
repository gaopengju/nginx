本文档摘录nginx的模块儿代码，备忘

<NOTE>各模块儿的初始化流程汇总如下：
--main()                        nginx入口
    --for()                         按顺序初始化ngx_modules[].index
    --ngx_init_cycle()              配置解析，refer <nginx_cycle.brief>
                                    创建模块儿的配置环境, 并初始化
        --ngx_modules[]->ctx->create_conf()  
                                        创建ngx_cycle->conf_ctx[]
        --...
        --解析配置文件
            --可能涉及到配置环境的创建
                --ngx_modules[]->ctx->create_conf()  
            --ngx_conf_parse()
            --可能涉及到配置环境的初始化
                --ngx_modules[]->ctx->init_conf()  
        --...
        --ngx_modules[]->ctx->init_conf()    
                                        初始化ngx_cycle->conf_ctx[]
        --ngx_modules[]->init_module()  初始化模块儿
    ---------------单进程模式---------------
    --ngx_single_process_cycle()
        --ngx_modules[]->init_process() 
    -----------master+worker模式------------
    --ngx_master_process_cycle()
        --ngx_start_worker_processes()
            --ngx_worker_process_cycle()
                --ngx_worker_process_init()
                    --ngx_modules[]->init_process()



1. ngx_core_module_create_conf
2. ngx_core_module_init_conf
10.全局数据结构
    ---ngx_modules[]
    ---ngx_core_module
    ---ngx_core_conf_t


1. ngx_core_module_create_conf()
    @file: ~/src/core/nginx.c
    @role: ngx_core_module->ctx->create_conf()

    --ngx_pcalloc()             分配结构ngx_core_conf_t
        --所有变量初始化为-1
    --ngx_array_init()          初始化->env

2. ngx_core_module_init_conf()
    @file: ~/src/core/nginx.c
    @role: ngx_core_module->ctx->init_conf()

    --ngx_conf_init_value()     设置默认值(配置文件没有值的情况下)
                                    ngx_core_conf_t->daemon = 1
                                    ->master = 1
                                    ->timer_resolution = 0
                                    ->worker_processes = 1
                                    ->debug_points = 0
    --getpwnam()                设置->username/user
    --getgrnam()                设置->group
    --...

10.全局数据结构
    10.1 ngx_modules[]
    @file: ~/src/core/ngx_conf_file.h
    @role: nginx所有模块儿组成的数组

    extern ngx_module_t  *ngx_modules[];
    typedef struct ngx_module_s      ngx_module_t;

    struct ngx_module_s {
        ngx_uint_t            ctx_index;        在同类型模块儿中的索引
        ngx_uint_t            index;            在所有模块儿中的索引，
                                                    对应ngx_modules[]索引

        ngx_uint_t            spare0;
        ngx_uint_t            spare1;
        ngx_uint_t            spare2;
        ngx_uint_t            spare3;

        ngx_uint_t            version;          当前模块儿版本号

        void                 *ctx;              指向当前模块儿特有的数据
        ngx_command_t        *commands;         配置项的处理函数数组
        ngx_uint_t            type;             模块儿类型

        ngx_int_t           (*init_master)(ngx_log_t *log);

        ngx_int_t           (*init_module)(ngx_cycle_t *cycle);

        ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
        ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
        void                (*exit_thread)(ngx_cycle_t *cycle);
        void                (*exit_process)(ngx_cycle_t *cycle);

        void                (*exit_master)(ngx_cycle_t *cycle);

        uintptr_t             spare_hook0;
        uintptr_t             spare_hook1;
        uintptr_t             spare_hook2;
        uintptr_t             spare_hook3;
        uintptr_t             spare_hook4;
        uintptr_t             spare_hook5;
        uintptr_t             spare_hook6;
        uintptr_t             spare_hook7;
    };   

    /*defined in ~/objs/ngx_modules.c, 由./configure自动生成*/
    ngx_module_t *ngx_modules[] = {
        &ngx_core_module,                   类型NGX_CORE_MODULE
        &ngx_errlog_module,                 类型NGX_CORE_MODULE
        &ngx_conf_module,
        &ngx_events_module,                 类型NGX_CORE_MODULE
        &ngx_event_core_module,
        &ngx_epoll_module,
        &ngx_openssl_module,                类型NGX_CORE_MODULE
        &ngx_regex_module,                  类型NGX_CORE_MODULE
        &ngx_http_module,                   类型NGX_CORE_MODULE
        &ngx_http_core_module,
        &ngx_http_log_module,               handler模块儿
        &ngx_http_upstream_module,
        &ngx_http_static_module,
        &ngx_http_autoindex_module,
        &ngx_http_index_module,
        &ngx_http_auth_basic_module,
        &ngx_http_access_module,
        &ngx_http_limit_conn_module,
        &ngx_http_limit_req_module,
        &ngx_http_geo_module,
        &ngx_http_map_module,
        &ngx_http_split_clients_module,
        &ngx_http_referer_module,
        &ngx_http_rewrite_module,           handler模块儿
        &ngx_http_ssl_module,
        &ngx_http_proxy_module,             upstream模块儿
        &ngx_http_fastcgi_module,
        &ngx_http_uwsgi_module,
        &ngx_http_scgi_module,
        &ngx_http_memcached_module,
        &ngx_http_empty_gif_module,
        &ngx_http_browser_module,
        &ngx_http_upstream_hash_module,     loadbalance模块儿
        &ngx_http_upstream_ip_hash_module,  loadbalance模块儿
        &ngx_http_upstream_least_conn_module,
        &ngx_http_upstream_keepalive_module,
        &ngx_http_write_filter_module,      filter模块儿
        &ngx_http_header_filter_module,
        &ngx_http_chunked_filter_module,
        &ngx_http_range_header_filter_module,
        &ngx_http_gzip_filter_module,
        &ngx_http_postpone_filter_module,
        &ngx_http_ssi_filter_module,
        &ngx_http_charset_filter_module,
        &ngx_http_userid_filter_module,
        &ngx_http_headers_filter_module,
        &ngx_http_copy_filter_module,
        &ngx_http_range_body_filter_module,
        &ngx_http_not_modified_filter_module,
        NULL
    };

    10.2 ngx_core_module
    @file: ~/src/core/nginx.c
    @role: 核心模块儿的信息结构

    ngx_module_t  ngx_core_module = {
        NGX_MODULE_V1,
        &ngx_core_module_ctx,                  /* module context */
        ngx_core_commands,                     /* module directives */
        NGX_CORE_MODULE,                       /* module type */
        NULL,                                  /* init master */
        NULL,                                  /* init module */
        NULL,                                  /* init process */
        NULL,                                  /* init thread */
        NULL,                                  /* exit thread */
        NULL,                                  /* exit process */
        NULL,                                  /* exit master */
        NGX_MODULE_V1_PADDING
    };

    static ngx_core_module_t  ngx_core_module_ctx = {
        ngx_string("core"),
        ngx_core_module_create_conf,
        ngx_core_module_init_conf
    };

    10.3 ngx_core_conf_t
    @file: ~/src/core/ngx_cycle.h
    @role: 核心模块儿ngx_core_module配置信息

    typedef struct {
        ngx_flag_t               daemon;            是否为精灵进程?
        ngx_flag_t               master;            master+worker运行模式?
        ngx_msec_t               timer_resolution;  是否使用SIGALRM提供定
                                                        时器解决方案
        ngx_int_t                worker_processes;  worker进程数
        ngx_int_t                debug_points;

        ngx_int_t                rlimit_nofile;
        ngx_int_t                rlimit_sigpending;
        off_t                    rlimit_core;

        int                      priority;          优先级

        ngx_uint_t               cpu_affinity_n;    cpu核心亲昵性配置
        uint64_t                *cpu_affinity;

        char                    *username;          用户名
        ngx_uid_t                user;              用户ID
        ngx_gid_t                group;             用户组ID

        ngx_str_t                working_directory;
        ngx_str_t                lock_file;

        ngx_str_t   pid;            存放程序PID的文件名, 在
                                        ngx_init_cycle()被初始化
        ngx_str_t   oldpid;

        ngx_array_t              env;
        char                   **environment;       保存的环境变量
    } ngx_core_conf_t;






