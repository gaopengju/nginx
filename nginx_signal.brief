本文档摘录nginx的信号处理, 包括-s参数处理; 其实信号是用户与主
进程master交互的主要途径, 备忘


1. ngx_signal_process
2. ngx_init_signals
3. ngx_signal_handler
10.全局数据结构
    ---signals[]


1. ngx_signal_process()
    @file: ~/src/core/ngx_cycle.c
    @role: 参数-s的处理流程

    --ngx_get_conf()                获取ngx_core_module模块儿的配置信息
    --ngx_open_file()               打开当前的进程ID文件, 读取进程ID
    --ngx_read_file()
    --ngx_close_file()
    --ngx_atoi()
    --ngx_os_signal_process()       处理-s参数
        --for()                         遍历signals，查找对应的处理信号
            --kill()                    然后向进程发送信号

2. ngx_init_signals()
    @file: ~/src/os/unix/ngx_process.c
    @role: 建立nginx的信号处理

    --for()                         遍历signals[]
        --sigaction()

3. ngx_signal_handler()
    @file: ~/src/os/unix/ngx_process.c
    @role: 信号处理函数

    --for()                         遍历signals[]，查找对应的信号
    --ngx_time_sigsafe_update()     更新缓存时间, refer <_time.brief>
    --                              设置一些全局标识
        --ngx_quit                      对应SIGQUIT
        --ngx_terminate                 对应SIGTERM
        --ngx_noaccept                  对应SIGWINCH
        --ngx_reconfigure               对应SIGHUP
        --ngx_reopen                    对应SIGUSR1
        --ngx_change_binary             对应SIGUSR2
        --ngx_sigalrm                   对应SIGALARM
        --ngx_sigio                     对应SIGIO
        --ngx_reap                      对应SIGCHLD
    --ngx_process_get_status()      处理SIGCHILD
        --waitpid()
        --更新ngx_processes[]信息
    --ngx_set_errno()               设置errno

10.全局数据结构
    10.1 signals[]
    @file: ~/src/unix/ngx_process.c
    @role: 对应-s参数的处理句柄数组, 也注册了其他的信号处理句柄

    ngx_signal_t  signals[] = {
        { ngx_signal_value(NGX_RECONFIGURE_SIGNAL),
            "SIG" ngx_value(NGX_RECONFIGURE_SIGNAL),
            "reload",
            ngx_signal_handler },       对应reload参数, SIGHUP信号

        { ngx_signal_value(NGX_REOPEN_SIGNAL),
            "SIG" ngx_value(NGX_REOPEN_SIGNAL),
            "reopen",
            ngx_signal_handler },       对应reopen参数, SIGUSR1信号

        { ngx_signal_value(NGX_NOACCEPT_SIGNAL),
            "SIG" ngx_value(NGX_NOACCEPT_SIGNAL),
            "",
            ngx_signal_handler },       对应SIGWINCH信号

        { ngx_signal_value(NGX_TERMINATE_SIGNAL),
            "SIG" ngx_value(NGX_TERMINATE_SIGNAL),
            "stop",
            ngx_signal_handler },       对应stop参数, SIGTERM信号

        { ngx_signal_value(NGX_SHUTDOWN_SIGNAL),
            "SIG" ngx_value(NGX_SHUTDOWN_SIGNAL),
            "quit",
            ngx_signal_handler },       对应quit参数, SIGQUIT信号

        { ngx_signal_value(NGX_CHANGEBIN_SIGNAL),
            "SIG" ngx_value(NGX_CHANGEBIN_SIGNAL),
            "",
            ngx_signal_handler },       更换二进制文件，对应SIGUSR2信号

        { SIGALRM, "SIGALRM", "", ngx_signal_handler },

        { SIGINT, "SIGINT", "", ngx_signal_handler },

        { SIGIO, "SIGIO", "", ngx_signal_handler },

        { SIGCHLD, "SIGCHLD", "", ngx_signal_handler },

        { SIGSYS, "SIGSYS, SIG_IGN", "", SIG_IGN },

        { SIGPIPE, "SIGPIPE, SIG_IGN", "", SIG_IGN },

        { 0, NULL, "", NULL }
    };
   






