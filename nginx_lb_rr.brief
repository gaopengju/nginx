本文档摘录nginx的round robin方式的upstream(囊括了带权重的rr), 备忘

加权轮询，就是计算各个后端服务器的当前权值，然后选择得分高的服务器处理
当前请求；但具体实现时需要考虑很多细节，如不同的权重、多次连接失败、出
错处理等

<NOTE>优缺点
    1. 相比IP hash，加权轮询策略的适用性更强，不依赖客户端的任何信息，
        完全依赖后端服务器的情况来选择；因此能够更加合理更均匀地分配
        客户端请求到后端服务器；
    2. 但同一客户端的多次请求可能会被分配到不同的后端服务器，无法满足
        会话保持的应用的需求

<NOTE>
    1. 加权轮询的配置示例
        upstream backend {
            server backend1.example.com weight=5;
            server 127.0.0.1:8000 max_fails=3 fail_timeout=30s;
            server UNIX:/tmp/backend3 backup;
            server 192.168.0.1:9000 down;
        }
      可以用域名、ip、UNIX域指定不同的server，它们代表不同的后端服务器

    2. 名词解释
        weight: 权重，默认值1
        max_fails/fail_timeout: 默认值1和10s；当服务器在fail_timeout时间
                                内发生了max_fails次连接失败，那么该服务器
                                在这fail_timeout时间内不再参与被选择
        backup: 备机，平常不被选择；当其他所有非备机全部不可用时才被使用
                                    此选项不用于ip_hash策略，会扰乱hash的
                                    结构
        down: 主动标识其为宕机状态，不参与被选择

    3. 某些参数只能配合某些策略生效(违背后，可能导致参数不生效), 这些配置
        参数承载在结构体ngx_http_upstream_server_t中

    4. 如果server中配置了域名，nginx在启动过程中需要调用gethostbyname()完
        成域名解析，因此可能出现卡顿(域名解析配置错误等)

1. ngx_http_upstream_init_round_robin
2. ngx_http_upstream_init_round_robin_peer
3. ngx_http_upstream_get_round_robin_peer
4. ngx_http_upstream_free_round_robin_peer
10.全局数据结构
    ---ngx_http_upstream_srv_conf_t
    ---ngx_http_upstream_server_t 
    ---ngx_http_upstream_rr_peer_t
    ---ngx_http_upstream_rr_peer_data_t


1. ngx_http_upstream_init_round_robin()
    @file: ~/src/http/ngx_http_upstream_round_robin.c
    @role: round robin类型的upstream环境初始化
            ngx_http_upstream_srv_conf_t(后续用xxx标识)
    @note: 
        1) 由于nginx默认负载均衡类型为rr，因此并没有对应的rr模块儿
        2) 简单起见，只摘录IP配置server的情况
        3) 后端服务器列表，backup和非backup是分开的

    --赋值xxx->peer.init            = ngx_http_upstream_init_round_robin_peer
                                        请求报文对应的round robin策略初始化
    ---------------创建后端服务器列表-----------------------
    --                              处理xxx->servers中非backup服务器
        --计算服务器数量 + 权重和
        --ngx_pcalloc()                 分配ngx_http_upstream_rr_peers_t
                                            并填充数据结构
        --赋值xxx->peer->data
    --                              处理xxx->servers中backup服务器
        --挂解到xxx->peer->data->next

    ---------------用户直接在proxy_pass指令配置后端服务器地址的情形------
    --隐式指定的负载均衡服务器(通过proxy_pass), 处理方式
      和前述类似，只是多一个地址解析过程

2. ngx_http_upstream_init_round_robin_peer()
    @file: ~/src/http/ngx_http_upstream_round_robin.c
    @role: 利用round robin策略的http后端请求, 每轮选择前初始化; 主要是
            设置获取后端服务器的回调函数
    @note: ngx_http_upstream_rr_peer_data_t用xxx标识

    --ngx_palloc()                  分配ngx_http_request_t->upstream
                                        ->peer.data, 
                                        ngx_http_upstream_rr_peer_data_t,
    --赋值xxx->current              = 0
    --赋值xxx->peers                = ngx_http_upstream_srv_conf_t->peer.data
    --初始化xxx->tried/data         当服务器数量少时，利用->data; 否则动态
                                        分配内存(每一位对应一个服务器)
    --                              初始化服务器获取函数
        --赋值ngx_http_request_t->upstream->peer.get
                        = ngx_http_upstream_get_round_robin_peer()
        --.free         = ngx_http_upstream_free_round_robin_peer()
        --.tries        = ngx_http_upstream_tries()
        --.set_session  = ngx_http_upstream_set_round_robin_peer_session()
        --.save_session = ngx_http_upstream_save_round_robin_peer_session()

3. ngx_http_upstream_get_round_robin_peer()
    @file: ~/src/http/ngx_http_upstream_round_robin.c
    @role: 一次选择中，利用rr策略选择合适的后端服务器
    @note: 算法思维
        1) nginx启动初始化->current_weight为0
        2) 每次选择时，->current_weight += ->effective_weight
        3) 选择->current_weight值最大的为best
        4) 选中后的best->current_weight值变更为 -sum(->effective_weight)
        5) 下次选择，迭代2~4步骤
        6) 当后端服务器异常时，->effective_weight会被调低; 当服务正常后，
            逐步恢复(对应代码->effective_weight++)

    --只有一台服务器，则直接选择它
        --ngx_http_upstream_rr_peers_t->single
    --ngx_http_upstream_get_peer()  选择满足要求的服务器
        --没有尝试过
        --非down状态
        --在->fail_timeout时间段内尚可重试
        --                              选择最优算法
            --选择->current_weight最大的
        --                              选中后处理
            --设置ngx_http_upstream_rr_peer_data_t->current
            --设置ngx_http_upstream_rr_peer_data_t->tried
            --更新ngx_http_upstream_rr_peer_t->current_weight
            --更新ngx_http_upstream_rr_peer_t->checked
    -----------------非备用选择失败------------------
    --ngx_http_upstream_get_round_robin_peer()
                                    从备用中选择(递归调用)
    --                              如果选择失败, 返回忙状态
        --设置->peer[].fails            = 0, 快速恢复
        --return NGX_BUSY

4. ngx_http_upstream_free_round_robin_peer()
    @file: ~/src/http/ngx_http_upstream_round_robin.c
    @role: 释放后端服务器

    --                              失败的情况
        --赋值ngx_http_upstream_rr_peer_t->fails++
                                        增加失败次数
        --赋值->accessed/checked        = ngx_time(), 当前时间
        --调整->effective_weight        按照最大失败次数的比例递减
    --                              成功的情况
        --调整->fails                   在fail_timeout时间段后才设置 = 0

10.全局数据结构
    10.1 ngx_http_upstream_srv_conf_t
    @file: ~/src/http/ngx_http_upstream.h
    @role: nginx upstream工作模式时，管理后置服务器集群的配置信息结构

    typedef struct ngx_http_upstream_srv_conf_s  
                                        ngx_http_upstream_srv_conf_t;

    struct ngx_http_upstream_srv_conf_s {
        ngx_http_upstream_peer_t  peer; 负载均衡策略信息
        void    **srv_conf;

        ngx_array_t   *servers;         后端服务器配置信息
                                            ngx_http_upstream_server_t
        ngx_uint_t flags;
        ngx_str_t  host;
        u_char     *file_name;
        ngx_uint_t line;
        in_port_t  port;
        in_port_t  default_port;
        ngx_uint_t no_port;  /* unsigned no_port:1 */
    };

    typedef struct {
        ngx_http_upstream_init_pt init_upstream;    
                                        负载均衡策略初始化句柄
        ngx_http_upstream_init_peer_pt   init;      
                                        rr方式的请求初始化句柄
        void        *data;              后端服务器列表(非backup),
                                            ngx_http_upstream_rr_peers_t
    } ngx_http_upstream_peer_t;

    10.2 ngx_http_upstream_server_t 
    @file: ~/src/http/ngx_http_upstream.h
    @role: 承载后端服务器对应的配置参数

    typedef struct {
        ngx_str_t     name;             
        ngx_addr_t    *addrs;           服务器的地址信息(域名时可能多个)
        ngx_uint_t    naddrs;           addrs[]个数
        ngx_uint_t    weight;           权重
        ngx_uint_t    max_fails;        fail_timeout内允许的最大失败次数
        time_t        fail_timeout;     衡量失败的某段时间，达到max_fails
                                            后，本时间段内不再尝试连接,
                                            直到此时间段完毕
        unsigned      down:1;           服务器是否启动?(主动宕机标识)
        unsigned      backup:1;         备用服务器，不接收请求
    } ngx_http_upstream_server_t;

    10.3 ngx_http_upstream_rr_peers_t
    @file: ~/src/http/ngx_http_upstream_round_robin.h
    @role: 后端服务器列表及头信息

    typedef struct ngx_http_upstream_rr_peers_s  ngx_http_upstream_rr_peers_t;

    struct ngx_http_upstream_rr_peers_s {
        ngx_uint_t      number;         服务器数量
        ngx_uint_t      total_weight;   服务器权重和

        unsigned        single:1;       服务器列表中只包含一台服务器?(优化)
                                            包括 备用+非备用的总和
        unsigned        weighted:1;     是否带有权重

        ngx_str_t       *name;          指向ngx_http_upstream_srv_conf_s->host

        ngx_http_upstream_rr_peers_t   *next;  
                                        链表指针，连接'backup服务器列表'
                                            或'通过proxy建立的服务器列表'
        ngx_http_upstream_rr_peer_t     peer[1];        
                                        后端服务器列表的具体服务器信息
    };

    /*后端服务器信息*/
    typedef struct {
        struct sockaddr  *sockaddr;         插口地址
        socklen_t        socklen;
        ngx_str_t        name;              插口名
        ngx_str_t        server;            服务器名

        ngx_int_t        current_weight;    当前权重,初始化为0
        ngx_int_t        effective_weight;  = weight
        ngx_int_t        weight;            权重

        ngx_uint_t       fails;             到目前已失败的次数
        time_t           accessed;          
        time_t           checked;           开始尝试时间，fail_timeout的
                                                起始参考点

        ngx_uint_t       max_fails;         fail_timeout内, 最大失败次数
        time_t           fail_timeout;      衡量最大失败次数的时间段

        ngx_uint_t       down;              设备是否主动标识宕机?

        ngx_ssl_session_t *ssl_session;     /*local to a process*/
    } ngx_http_upstream_rr_peer_t;

    10.4 ngx_http_upstream_rr_peer_data_t
    @file: ~/src/http/ngx_http_upstream_round_robin.h
    @role: 用于http请求的rr状态维护结构

    typedef struct {
        ngx_http_upstream_rr_peers_t   *peers;      指向后端服务器列表
        ngx_uint_t   current;       当前选中的后端服务器在peers->peer[]
                                        中的索引
        uintptr_t    *tried;        用于rr的服务器位图指针,
                                        = &data(服务器量少时)
                                        = &动态内存(量多时)
                                        标识此轮选择中，服务器是否已经被
                                        选择过
        uintptr_t    data;          标识服务器已经被选择过的位图
    } ngx_http_upstream_rr_peer_data_t;













