本文档摘录upstream实现，以期更深入了解负载均衡，备忘

<NOTE>
    1) 实现文件: ~/src/http/ngx_http_upstream.c


1. ngx_http_upstream_init_main_conf
10.全局数据结构
    ---ngx_http_upstream_main_conf_t
    ---ngx_http_upstream_srv_conf_t
    ---ngx_http_upstream_server_t
    ---ngx_http_upstream_peer_t
    ---ngx_http_upstream_module
    ---ngx_http_upstream_vars[]
    ---ngx_http_upstream_headers_in[]


1. ngx_http_upstream_init_main_conf()
    @role: 初始化upstream模块儿配置信息, 
    @note: 后续用xxx标识ngx_http_upstream_main_conf_t
            
    --for()                     遍历初始化所有的xxx->upsteams[]
        --xxx->upsteams[]->peer.init_upstream()
                                    初始化LB环境, 主要涉及内存分配等
                                    参考<nginx_lb_xxx.brief>, 如果未
                                    配置LB策略, 默认采用round robin
            --ngx_http_upstream_init_round_robin()
    --for()                     遍历ngx_http_upstream_headers_in[]
                                    构建hash key数组
        --ngx_hash_key_lc()
            --ngx_hash()
    --ngx_hash_init()           利用上述hash key数组构建hash数组,
                                xxx->headers_in_hash,

10.全局数据结构
    10.1 ngx_http_upstream_main_conf_t
    @file: ~/src/http/ngx_http_upstream.h 
    @role: upstream模块儿的配置信息

    typedef struct {
        ngx_hash_t      headers_in_hash;    
                                hash数组, 存储本模块儿对http头部处理
                                    的回调函数, 计算hash值的函数为
                                    ngx_hash_key_lc(); 依据
                                    ngx_http_upstream_headers_in[]构建

        ngx_array_t     upstreams;  
                                所有upstream实例配置信息集合,
                                    ngx_http_upstream_srv_conf_t
    } ngx_http_upstream_main_conf_t;

    10.2 ngx_http_upstream_srv_conf_t
    @file: ~/src/http/ngx_http_upstream.h 
    @role: 对应单个upstream{}实例上下文

    typedef struct ngx_http_upstream_srv_conf_s  
                        ngx_http_upstream_srv_conf_t;

    struct ngx_http_upstream_srv_conf_s {
        ngx_http_upstream_peer_t peer;
                                负载均衡(LB)策略的相关信息, 包括
                                    初始化函数、计算环境及信息等,
                                    ->init_upstream在各LB策略配
                                    置解析过程中设置, 其他则在
                                    ->init_upstream()执行过程中
                                    初始化
        void  **srv_conf;       回指指针, 方便构建配置索引

        ngx_array_t *servers;   上下文的server配置信息,
                                    ngx_http_upstream_server_t

        ngx_uint_t  flags;      标志, NGX_HTTP_UPSTREAM_CREATE
                                            _WEIGHT/_MAX_FAILS/
                                            _FAIL_TIMEOUT/_DOWN/
                                            _BACKUP
                                    在具体的模块儿可能有调整, 去掉
                                    不支持的标志, 如ip_hash LB策略
                                    不支持_BACKUP
        ngx_str_t   host;       对应upstream xxx{}中的xxx
        u_char      *file_name; 对应的配置文件名
        ngx_uint_t  line;       行号
        in_port_t   port;
        in_port_t   default_port;
        ngx_uint_t  no_port;    = 1
    };

    10.3 ngx_http_upstream_server_t
    @file: ~/src/http/ngx_http_upstream.h 
    @role: upstream{}上下文中的server配置信息

    typedef struct {
        ngx_str_t  name;            原始配置中, "域名:port"/"ip:port"
        ngx_addr_t *addrs;          服务器对应的地址
        ngx_uint_t naddrs;          addrs[]个数(域名配置时可能为多个)
        ngx_uint_t weight;          权重, 默认值1
        ngx_uint_t max_fails;       参考时间内允许的最大失败次数, 默认值1
        time_t     fail_timeout;    参考时间, 默认值10

        unsigned   down:1;          是否为备用设备?(一般不处理用户请求, 
                                        当所有非备机不能提供服务时，才
                                        启用)
        unsigned   backup:1;        是否宕机?
    } ngx_http_upstream_server_t;

    10.4 ngx_http_upstream_peer_t
    @file: ~/src/http/ngx_http_upstream.h 
    @role: 对应的LB策略指针, 包括初始化、计算环境初始化等

    typedef struct {
        ngx_http_upstream_init_pt        init_upstream;
                                    LB策略环境初始化函数, 分配内存等
        ngx_http_upstream_init_peer_pt   init;
                                    处理客户请求前调用, 初始化LB计算环境
        void                            *data;
                                    LB策略需要的信息, 对于RR为
                                        ngx_http_upstream_rr_peers_t
    } ngx_http_upstream_peer_t;

    10.5 ngx_http_upstream_module
    @role: upstream模块儿

    ngx_module_t  ngx_http_upstream_module = {
        NGX_MODULE_V1,
        &ngx_http_upstream_module_ctx,  模块儿特有配置
        ngx_http_upstream_commands,     此模块儿可配置项及处理函数
        NGX_HTTP_MODULE,                模块儿类型
        NULL,                                  /* init master */
        NULL,                                  /* init module */
        NULL,                                  /* init process */
        NULL,                                  /* init thread */
        NULL,                                  /* exit thread */
        NULL,                                  /* exit process */
        NULL,                                  /* exit master */
        NGX_MODULE_V1_PADDING
    };

    static ngx_http_module_t  ngx_http_upstream_module_ctx = {
        ngx_http_upstream_add_variables,    
                                将ngx_http_upstream_vars[]
                                加入到ngx_http_core_main_conf_t
                                ->variables_keys
        NULL,

        ngx_http_upstream_create_main_conf,
                                创建ngx_http_upstream_main_conf_t,
                                作为upstream模块儿的上下文
        ngx_http_upstream_init_main_conf, 

        NULL,
        NULL,

        NULL,
        NULL
    };

    static ngx_command_t  ngx_http_upstream_commands[] = {
        { ngx_string("upstream"),
            NGX_HTTP_MAIN_CONF|NGX_CONF_BLOCK|NGX_CONF_TAKE1,
            ngx_http_upstream,  处理upstream关键字, 添加upstream{}
                                实例,ngx_http_upstream_srv_conf_t,
                                到ngx_http_upstream_main_conf_t
                                ->upstreams[], 并按照配置初始化
            0,
            0,
            NULL },

        { ngx_string("server"),
            NGX_HTTP_UPS_CONF|NGX_CONF_1MORE,
            ngx_http_upstream_server,   
                                处理upstream上下文的server关键字,
                                添加server实例,ngx_http_upstream_server_t,
                                到ngx_http_upstream_srv_conf_t->servers[],
                                并根据配置文件初始化配置
            NGX_HTTP_SRV_CONF_OFFSET,
            0,
            NULL },

        ngx_null_command
    };

    10.6 ngx_http_upstream_vars[]
    @file: ~/src/http/ngx_http_upstream.c
    @role: upstream模块儿支持的内部变量

    static ngx_http_variable_t  ngx_http_upstream_vars[] = {

        { ngx_string("upstream_addr"), NULL,
            ngx_http_upstream_addr_variable, 0,
            NGX_HTTP_VAR_NOCACHEABLE, 0 },

        { ngx_string("upstream_status"), NULL,
            ngx_http_upstream_status_variable, 0,
            NGX_HTTP_VAR_NOCACHEABLE, 0 },

        ...

        { ngx_null_string, NULL, NULL, 0, 0, 0 }
    };

    10.7 ngx_http_upstream_headers_in[]
    @file: ~/src/http/ngx_http_upstream.c
    @role: upstream模块儿对http头部选项的处理回调

    ngx_http_upstream_header_t  ngx_http_upstream_headers_in[] = {

        { ngx_string("Status"),
            ngx_http_upstream_process_header_line,
            offsetof(ngx_http_upstream_headers_in_t, status),
            ngx_http_upstream_copy_header_line, 0, 0 },

        { ngx_string("Content-Type"),
            ngx_http_upstream_process_header_line,
            offsetof(ngx_http_upstream_headers_in_t, content_type),
            ngx_http_upstream_copy_content_type, 0, 1 },

        ...

        { ngx_null_string, NULL, 0, NULL, 0, 0 }
    };


