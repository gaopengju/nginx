#+TITLE: NGINX代码导读
#+AUTHOR: sqlfocus


* 入口
*文件* main():~/src/core/nginx.c

* 信号处理
*函数入口* =ngx_signal_process():~/src/os/unix/ngx_process.c=

对应命令行参数-s

* 时间缓存
*函数* ~ngx_time_init()~ : =~/src/core/ngx_times.c=

nginx中的时间以秒为粒度，被缓存起来，并形成丰富的字符串格式；此设计使得
少更新多读取的时间操作尤其高效。

缓存时间设定了定量的槽位，构成缓存循环队列；以免某些请求的处理时间大于s
的粒度，造成紊乱。

* 插口继承
*函数* =ngx_add_inherited_sockets()= :~/src/core/nginx.c

启动nginx时，可通过环境变量NGINX继承已有的socket插口

* 初始化插口
  - listen配置解析     :: =ngx_http_core_listen():~/src/http/ngx_http_core_module.c=
  - 建立监听插口结构   :: =ngx_http_optimize_servers():~/src/http/ngx_http.c=
  - 建立监听链路       :: =ngx_open_listening_sockets():~/src/core/ngx_connection.c=
  - 根据listen配置设置链路属性  :: =ngx_configure_listening_sockets():~/src/core/ngx_connection.c=

  #+BEGIN_EXAMPLE
  调用流程
  -main()                                          ~/src/core/nginx.c
     -ngx_init_cycle()                             ~/src/core/ngx_cycle.c
        -ngx_conf_parse()
           -ngx_http_block()                       ngx_http_module模块儿解析
              -ngx_http_core_server()              server{}解析
                 -ngx_http_core_listen()           listen配置解析
                 -...
                 -ngx_http_add_listen()            解析结果挂接入配置系统
              -ngx_http_optimize_servers()         创建监听插口结构
        -...
        -ngx_open_listening_sockets()              创建链路
        -ngx_configure_listening_sockets()         配置链路
  #+END_EXAMPLE

* 配置解析
  - 入口函数           :: =ngx_conf_parse():~/src/core/ngx_conf_file.c=
  - http{}入口函数     :: =ngx_http_block():~/src/http/ngx_http.c=
  - server{}入口函数   :: =ngx_http_core_server():~/src/http/ngx_http_core_module.c=
  - location{}入口函数 :: =ngx_http_core_location():~/src/http/ngx_http_core_module.c=

#+CAPTION: 四级指针视图
[[file:ngx_http_module-http{}.png]]

#+CAPTION: SERVER上下文视图
[[file:ngx_http_core_module-server{}.png]]

#+CAPTION: LOCATION上下文视图
[[file:ngx_http_core_module-location{}.png]]

#+CAPTION: location优化后视图
[[file:ngx_http_core_module-loc_conf-optimization.png]]

[[http://blog.csdn.net/xiaofei0859/article/details/51848897][参考网址]]

* 模块儿初始化流程
#+BEGIN_EXAMPLE
--main()                        入口，~/src/core/nginx.c
    --ngx_preinit_modules()         初始化ngx_modules[].index及模块儿名
    --ngx_init_cycle()              配置解析
        --ngx_cycle_modules()           创建模块儿的配置环境, 并初始化
        --ngx_modules[]->ctx->create_conf()  
                                        NGX_CORE_MODULE类型模块创建配置环境,ngx_cycle->conf_ctx[]
        --ngx_conf_parse()
            --ngx_conf_handler()            解析配置主入口，ngx_conf_file.c
                                            其中涉及模块儿配置信息结构的内存分配等
                -- 查找ngx_cycle_t->modules[]->commands[]
                   获取对应的处理命令
                -- 调用命令->set()
        --ngx_modules[]->ctx->init_conf()    
                                        未配置的项采用默认值
        --ngx_init_modules()            模块儿启动前的特殊准备，主要针对集成的第三方
            --ngx_cycle_t->modules[]->init_module()
    ---------------单进程模式---------------
    --ngx_single_process_cycle()
        --ngx_modules[]->init_process() 模块儿进程级初始化(所有)
    -----------master+worker模式------------
    --ngx_master_process_cycle()
        --ngx_start_worker_processes()
            --ngx_worker_process_cycle()              fork()后，worker进程的执行入口点
                --ngx_worker_process_init()
                    --ngx_modules[]->init_process()   ~/src/os/unix/ngx_process_cycle.c
#+END_EXAMPLE

* handle phase
  - 阶段名              :: =ngx_http_phases:~/src/http/ngx_http_core_module.h=
  - 注册                :: =各模块儿ngx_module_t->ctx->postconfiguration()=
  - 优化排序            :: =ngx_http_init_phase_handlers():~/src/http/ngx_http.c=
  - 执行入口            :: =ngx_http_core_run_phases():~/src/http/ngx_http_core_module.c=

  #+BEGIN_EXAMPLE
  此四阶段不能挂接回调函数
    NGX_HTTP_FIND_CONFIG_PHASE
    NGX_HTTP_POST_REWRITE_PHASE
    NGX_HTTP_POST_ACCESS_PHASE
    NGX_HTTP_TRY_FILES_PHASE

  流程
  -ngx_init_cycle()
     -ngx_conf_parse()
        -ngx_http_block()
           -递归解析
           -ngx_module_t->ctx->postconfiguration()
           -ngx_http_init_phase_handlers()
     -...
  -for(;;)                                     worker处理循环
     -ngx_process_events_and_timers()
     -ngx_event_process_posted()
        -ngx_http_init_connection()
        -...
        -???ngx_http_core_run_phases()
  #+END_EXAMPLE
* worker进程
*入口函数* =ngx_worker_process_cycle():~/src/os/unix/ngx_process_cycle.c=

* 高速IO模型
  - 初始化入口           : =ngx_event_process_init():~/src/event/ngx_event.c=
  - worker主循环处理入口 : =ngx_process_events_and_timers():~/src/event/ngx_event.c=
  - EPOLL事件处理入口    : =ngx_epoll_process_events():~/src/event/modules/ngx_epoll_module.c=
  - ACCEPT事件处理入口   : =ngx_event_accept():~/src/event/ngx_event_accept.c=
  

  #+BEGIN_EXAMPLE
  -ngx_init_cycle()
     -ngx_conf_parse()
        -ngx_events_block()                      events{}解析，ngx_event.c
     -ngx_init_modules()
        -ngx_event_module_init()
  -ngx_master_process_cycle()
     -ngx_start_worker_processes()
        -ngx_spawn_process()
           -fork()
           -ngx_worker_process_cycle()           worker进程执行入口
              -ngx_worker_process_init()
                 -ngx_event_process_init()
                    -初始化事件队列
                    -ngx_epoll_init()
                       -epoll_create()
                       -创建epoll事件结构数组
                       -设置底层IO句柄ngx_os_io
                       -设置数据处理句柄ngx_epoll_module_ctx.actions
                    -读、写信息链表
                    -建立监听链路结构与请求结构读对应关系
                    -设置ACCEPT事件处理句柄ngx_event_accept/ngx_event_recvmsg
              -for(;;)                          worker处理循环
                 -ngx_process_events_and_timers()
                    -ngx_trylock_accept_mutex() 添加待监控链路到EPOLL系统
                    -ngx_process_events()       处理
                    -ngx_event_process_posted()
    #+END_EXAMPLE

* HTTP请求处理
  - 处理入口    : =ngx_http_init_connection():~/src/http/ngx_http_request.c=



