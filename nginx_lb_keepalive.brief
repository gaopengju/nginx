本文档摘录nginx的keepalive负载均衡策略，它的目的是和后端服务器维持一定
数量的长连接，以提高响应速度

通过先保存然后覆盖upstream处理指针的方式，截获请求报文的upstream处理，
从而实现keepalive的策略。

<NOTE>官网说明摘录
    Syntax: keepalive connections;
    Default:    —
    Context:    upstream
    This directive appeared in version 1.1.4.

    Activates the cache for connections to upstream servers.
    使能到后端服务器连接的缓存功能

    The connections parameter sets the maximum number of idle keepalive
    connections to upstream servers that are preserved in the cache of each
    worker process. When this number is exceeded, the least recently used
    connections are closed.
    参数connections代表每个worker进程允许的到后端服务器的最大空闲长连接数目。
    如果超过了这个数目，最近最少使用的连接将被关闭。

    It should be particularly noted that the keepalive directive does not 
    limit the total number of connections to upstream servers that an nginx 
    worker process can open. The connections parameter should be set to a 
    number small enough to let upstream servers process new incoming 
    connections as well.
    需要注意的是，keepalive原语并不限制nginx worker进程可以打开的到后端服务
    器的连接数。尽管如此，connections参数应该设置成比较小的数目，以便后端
    服务器可以更好处理新来的请求

<NOTE>配置示例
        upstream http_backend {
            server 127.0.0.1:8000;
            server 127.0.0.1:9000;

            keepalive 32;
        }

        server {
            ...
            location /http/ {
                proxy_pass http://http_backend;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                ...
            }
        }
    注意，此处只是给出了http的配置方式，其他的如memcached、fastcgi等配置
    方式和此处不同，请参考nginx官网文档
    http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive>

1. ngx_http_upstream_keepalive
2. ngx_http_upstream_init_keepalive
3. ngx_http_upstream_init_keepalive_peer
4. ngx_http_upstream_get_keepalive_peer
5. ngx_http_upstream_free_keepalive_peer
10.全局数据结构
    ---ngx_http_upstream_keepalive_module
    ---ngx_http_upstream_keepalive_srv_conf_t
    ---ngx_http_upstream_keepalive_peer_data_t



1. ngx_http_upstream_keepalive()
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: 解析配置指令"keepalive num;"

    --赋值ngx_http_upstream_srv_conf_t->peer.init_upstream
                                    = ngx_http_upstream_init_keepalive
    --赋值ngx_http_upstream_keepalive_srv_conf_t->max_cached
                                    = 配置的参数num
    --赋值ngx_http_upstream_keepalive_srv_conf_t->original_init_upstream
                                    = ->peer.init_upstream, 保存均衡算法，
                                    默认是rr

2. ngx_http_upstream_init_keepalive()
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: keepalive环境初始化
    @note: 后续用xxx标识ngx_http_upstream_keepalive_srv_conf_t

    --xxx->original_init_upstream() 上层均衡环境初始化
    --赋值xxx->original_init_peer   = 原始的环境初始化
    --赋值ngx_http_upstream_srv_conf_t->peer.init
                                    = ngx_http_upstream_init_keepalive_peer
    --ngx_pcalloc()                 分配内存ngx_http_upstream_keepalive_cache_t
    --ngx_queue_insert_head()           赋值xxx->free

3. ngx_http_upstream_init_keepalive_peer()
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: 客户请求到来时，keepalive策略信息初始化
    @note: 后续用xxx标识ngx_http_upstream_keepalive_peer_data_t

    --ngx_palloc()                  分配结构
                                        ngx_http_upstream_keepalive_peer_data_t
    --ngx_http_upstream_keepalive_srv_conf_t->original_init_peer()
                                    顶层策略初始化
    --赋值xxx->conf/upstream/data/original_get_peer/original_free_peer
    --覆盖ngx_http_request_t->upstream->peer.data
                                    = xxx
    --覆盖ngx_http_request_t->upstream->peer.get/free
                                    = ngx_http_upstream_get_keepalive_peer
                                    /ngx_http_upstream_free_keepalive_peer
                                    这样就可以截获upstream的处理，让流量先
                                    到此处

4. ngx_http_upstream_get_keepalive_peer()
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: keepalive策略，获取后端服务器
    @note: 后续利用xxx标识ngx_http_upstream_keepalive_peer_data_t; 利用
            yyy标识ngx_http_upstream_keepalive_cache_t
    @note: 如果返回值为NGX_DONE, 则不需要建立连接，直接利用cahce的连接
            即可；如果返回值为NGX_OK，则需要新建立连接
        

    --xxx->original_get_peer()      利用顶层负载策略获取后端服务器
    --for()                         遍历xxx->conf->cache，搜索合适的连接
        --ngx_queue_data()              提取结构yyy
        --ngx_memn2cmp()                比较socket IP地址
        --                              如果匹配上
            --ngx_queue_remove()            删除缓存，加入free列表
            --ngx_queue_insert_head()
            --赋值ngx_peer_connection_t->connection/cached
                                            从缓存中提取后端的连接，不
                                            需要再次建立连接；并设置标识
                                            此连接从cache中得来
            --返回值NGX_DONE
    --返回值NGX_OK

5. ngx_http_upstream_free_keepalive_peer()
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: 请求处理完毕后的流程, 保存连接到缓存

    --请求处理状态是否争取
    --upstream是否配置了keepalive, ngx_http_upstream_t->keepalive
    --ngx_handle_read_event()       监控连接的读事件
    --ngx_queue_data()              找到缓存，从
                                        ngx_http_upstream_keepalive_peer_data_t
                                        ->conf->free提取；或从->conf->cache找
                                        最近最少使用的
    --赋值ngx_http_upstream_keepalive_cache_t->connection
                                    保存当前后端服务器连接
    --ngx_queue_insert_head()           并插入->conf->cache队列
    --ngx_memcpy()                      更新对应的插口地址
    --赋值ngx_peer_connection_t->connection
                                    = NULL, 保证后续不关闭tcp通道
    --更新连接的状态
        --ngx_connection_t->write->handler
        --ngx_connection_t->read->handler
        --ngx_connection_t->idle        = 1
    --ngx_http_upstream_keepalive_peer_data_t->original_free_peer()
                                    原负载均衡算法环境清理

10.全局数据结构
    10.1 ngx_http_upstream_keepalive_module
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: keepalive负载均衡模块儿的配置

    ngx_module_t  ngx_http_upstream_keepalive_module = {
        NGX_MODULE_V1,
        &ngx_http_upstream_keepalive_module_ctx, /* module context */
        ngx_http_upstream_keepalive_commands,    /* module directives */
        NGX_HTTP_MODULE,                       /* module type */
        NULL,                                  /* init master */
        NULL,                                  /* init module */
        NULL,                                  /* init process */
        NULL,                                  /* init thread */
        NULL,                                  /* exit thread */
        NULL,                                  /* exit process */
        NULL,                                  /* exit master */
        NGX_MODULE_V1_PADDING
    };

    static ngx_command_t  ngx_http_upstream_keepalive_commands[] = {
        { ngx_string("keepalive"),
            NGX_HTTP_UPS_CONF|NGX_CONF_TAKE1,
            ngx_http_upstream_keepalive,
            NGX_HTTP_SRV_CONF_OFFSET,
            0,
            NULL },

        ngx_null_command
    };

    10.2 ngx_http_upstream_keepalive_srv_conf_t
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: keepalive策略的配置结构

    typedef struct {
        ngx_uint_t     max_cached;          最大缓存数目

        ngx_queue_t    cache;               缓存队列
        ngx_queue_t    free;                空闲队列

        ngx_http_upstream_init_pt          original_init_upstream;
                                                此策略对应的顶层策略句柄
        ngx_http_upstream_init_peer_pt     original_init_peer;
                                                此策略对应的顶层策略句柄
    } ngx_http_upstream_keepalive_srv_conf_t;

    /*对应ngx_http_upstream_keepalive_srv_conf_t->cache/free的元素*/
    typedef struct {
        ngx_http_upstream_keepalive_srv_conf_t  *conf;
                                            回指配置结构
        ngx_queue_t       queue;
        ngx_connection_t  *connection;

        socklen_t   socklen;                对应的连接地址
        u_char      sockaddr[NGX_SOCKADDRLEN];  
    } ngx_http_upstream_keepalive_cache_t;

    10.3 ngx_http_upstream_keepalive_peer_data_t
    @file: ~/src/http/modules/ngx_http_upstream_keepalive_module.c
    @role: 对应客户请求的策略信息

    typedef struct {
        ngx_http_upstream_keepalive_srv_conf_t  *conf;
                                            配置结构
        ngx_http_upstream_t  *upstream;     对应ngx_http_request_t->upstream

        void                 *data;         对应ngx_http_request_t->upstream
                                                ->peer.data
        ngx_event_get_peer_pt original_get_peer;
        ngx_event_free_peer_pt original_free_peer;
                                            顶层策略的获取服务器的方法
#if (NGX_HTTP_SSL)
        ngx_event_set_peer_session_pt      original_set_session;
        ngx_event_save_peer_session_pt     original_save_session;
#endif
    } ngx_http_upstream_keepalive_peer_data_t;









