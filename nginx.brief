1. main()
    @file: ~/src/core/nginx.c
    @role: nginx的入口点

    --ngx_strerror_init()           利用strerror提取关注此错误信息，并
        --for()                     把0～NGX_SYS_NERR的错误信息存储在
            --strerror()            数组ngx_sys_errlist[]
            --malloc()
            --ngx_memcpy()
    --ngx_get_options()             读取命令行参数，并利用指针记录下来,
                                        如配置文件(-c xxx)、信号(-s xxx)等;
                                        信号处理, 赋值ngx_process = 
                                        NGX_PROCESS_SIGNALLER
    --ngx_time_init()               <Bang!!!>初始化缓存时间cached_time[],
                                        refer <nginx_time.brief>
        --ngx_time_update()
    --ngx_regex_init()              初始化PCRE的内存分配/释放函数
                                        pcre_malloc = ngx_regex_malloc
                                        pcre_free = ngx_regex_free
    --ngx_getpid()                  获取本进程PID，赋值ngx_pid
        --getpid() 
    --ngx_log_init()                初始化日志输出
        --ngx_open_file()
    --ngx_ssl_init()                SSL模块儿初始化
        --SSL_library_init()
        --OpenSSL_add_all_algorithms()
    --ngx_memzero()                 初始化ngx_cycle, refer <_cycle.brief>
    --ngx_create_pool()                 初始化ngx_cycle.pool, 地址池
    --ngx_save_argv()               保存程序的参数, ngx_argc/ngx_argv
        --ngx_alloc()                   ngx_os_argv/ngx_os_environ
        --ngx_cpystrn()
    --ngx_process_options()         处理程序参数
        --配置前缀-p                    设置ngx_cycle->conf_prefix/prefix
        --配置文件-c                    设置ngx_cycle->conf_file
        --配置测试-t                    设置ngx_cycle->log->log_level
        --指定参数-g                    设置ngx_cycle->conf_param
    --ngx_os_init()                 获取系统特属性，如CPU数、cache大小等
        --ngx_init_setproctitle()       修正程序title
        --getpagesize()                 获取页大小, 赋值ngx_pagesize/
                                            ngx_pagesize_shift/
                                            ngx_cacheline_size
        --sysconf                       获取CPU数，赋值ngx_ncpu
        --ngx_cpuinfo()                 调整ngx_cacheline_size
        --getrlimit()                   获取资源限制数，赋值
                                            ngx_max_sockets
        --srandom()                     初始化随机数种子
    --ngx_crc32_table_init()        按照CPU缓存对齐CRC表, ngx_crc32_table_short
    --ngx_add_inherited_sockets()   解析继承的插口fd，保存到ngx_cycle->
        --ngx_array_init()              listening, 参<nginx_socket.brief>
        --ngx_set_inherited_sockets()
    --for()                         初始化ngx_modules[].index, 
                                        refer <nginx_mod.brief>
    --ngx_init_cycle()              <Bang!!!>配置解析，
                                        refer <nginx_cycle.brief>
    --ngx_signal_process()          处理参数-s, refer <nginx_signal.brief>
        --ngx_os_signal_process()
    --ngx_os_status()               输出一些调试信息
        --ngx_log_error()
    --                              确定并赋值ngx_cycle
    --                              确定并赋值ngx_process, 为
                                        NGX_PROCESS_SINGLE单进程模式
                                        NGX_PROCESS_MASTER主+工作线程模式
    --ngx_init_signals()            设置信号处理句柄，signals[], 参考
        --sigaction()                   <nginx_signal.brief>
    --ngx_daemon()                  精灵化
        --赋值ngx_daemonized            = 1
    --ngx_create_pidfile()          记录master进程的PID到文件
        --ngx_open_file()               ngx_core_conf_t->pid
        --ngx_snprintf()
        --ngx_write_file()
        --ngx_close_file()
    --ngx_log_redirect_stderr()     重定向错误输出到日志fd
        --ngx_set_stderr()
            --dup2()
    --ngx_single_process_cycle()    <Bang!!!>单进程模式
    --ngx_master_process_cycle()    master+worker模式, 参考
                                        <nginx_process.brief>

10.全局数据结构
    10.1 ngx_sys_errlist[]
    @file: ~/src/os/unix/ngx_errno.c
    @role: 构建nginx的错误信息，从具体的操作系统抽象出来; 对于unix操作系
            统，错误信息通过strerror()得到

    static ngx_str_t  *ngx_sys_errlist;

    typedef struct {
        size_t      len;
        u_char     *data;
    } ngx_str_t;

    10.2 ngx_process
    @file: ~/src/os/unix/ngx_process_cycle.c
    @role: 当前进程的角色

    ngx_uint_t    ngx_process;

    #define NGX_PROCESS_SINGLE     0,   单进程模式
    #define NGX_PROCESS_MASTER     1,   master + worker模式的master进程
    #define NGX_PROCESS_SIGNALLER  2,   处理信号模式, 即处理-s参数的情况
    #define NGX_PROCESS_WORKER     3,   master + worker模式的worker进程
    #define NGX_PROCESS_HELPER     4,   cache进程; 处理命令行参数-h的进程
